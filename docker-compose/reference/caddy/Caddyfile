{
  # debug
  https_port  {$SITE_PORT}
  auto_https  disable_redirects
  default_sni {$DEFAULT_SNI}
  admin       :{$ADMIN_PORT}
}

{$SITE_DOMAIN}:{$SITE_PORT} {

  encode zstd gzip
  header /* Server "p6proxy/{$P6PROXY_VERSION}"

  @baseUrlParam {
    query baseUrl=*
  }

  route @baseUrlParam {

    # Ensure we have a valid p6auth JWT
    jwt_valid {
      pem_keypath /data/conf.d/{$P6AUTH_PUBLIC_KEY_FILE}
      has_claim iss http://amalto.com
      has_claim jti b2jwt-1.0.1
      clockskew "3m"
      fail_header Access-Control-Allow-Origin *
    }

    # Split baseUrl parameter into component parts: scheme, host, colon, port and path
    vars_regex {
      name baseurl
      source {http.request.uri.query.baseUrl}
      pattern "(?P<scheme>https?:\/\/)(?P<host>[^:^\/]*)(?P<colon>:)?(?P<port>\d*[^\/])?(?P<path>.*[^\/])?"
    }

    @httpsTarget {
        expression string({http.vars_regex.baseurl.scheme}).startsWith('https')
    }

    @httpTarget {
        expression string({http.vars_regex.baseurl.scheme}).startsWith('http:')
    }

   # When using placeholders as arguments to reverse_proxy you have to specify host:port
   # However a port may not have been specified in the request...
    vars_regex {
        name default_port
        source {http.vars_regex.baseurl.port}
        pattern ".*"
    }

    # Force any missing port in the https baseUrl to be 443 using this vars_regex trick:
    vars_regex @httpsTarget {
        name default_port
        source "443"
        pattern ".*"
        overwrite false
    }

    # Force any missing port in the http baseUrl to be 80 using this vars_regex trick:
    vars_regex @httpTarget {
        name default_port
        source "80"
        pattern ".*"
        overwrite false
    }

    # Rewrite as baseUrl:path + original url path
    rewrite {http.vars_regex.baseurl.path}{http.request.uri.path}

    # Finally... proxy the request

    # https
    reverse_proxy @httpsTarget {http.vars_regex.baseurl.host}:{http.vars_regex.default_port.match1} {
      transport http {
        tls
        # Ignore bad certs on the targets
        tls_insecure_skip_verify
        dial_timeout 5s
        response_header_timeout 3s
      }
      header_up Host {http.reverse_proxy.upstream.hostport}
    }
    # http
    reverse_proxy @httpTarget {http.vars_regex.baseurl.host}:{http.vars_regex.default_port.match1} {
      transport http {
        dial_timeout 5s
        response_header_timeout 3s
      }
      header_up Host {http.reverse_proxy.upstream.hostport}
    }
  }

  reverse_proxy {$RUNLOCAL_BUCKET_HOST} {
    header_up Host {$RUNLOCAL_BUCKET_HOST}
  }

  log {
    # level debug
      output file /data/logs/access.log {
      roll_size 1gb
      roll_keep 5
      roll_keep_for 720h
    }
    format single_field common_log
  }
}
